new.decTable.train
## generowanie reduktu w oparciu o dane dyskretne, wybrana metoda "quickreduct"
reduct <- FS.feature.subset.computation(new.decTable.train, method = "quickreduct.rst")
## zastosowanie listy cech zawartej w redukcie do wygenerowania zestawu reguł:
rules <- RI.indiscernibilityBasedRules.RST(new.decTable.train, reduct)
summary(rules)
## predicting newdata
result <- as.numeric(predict(rules, new.decTable.test)$predictions)
accuracy = sum(as.array(test.classes) == (result))/length(test.classes)*100
sprintf("Wynik klasyfikacji: %.1f proc.",accuracy)
## zastosowanie listy cech zawartej w redukcie do wygenerowania zestawu reguł:
rules <- RI.indiscernibilityBasedRules.RST(new.decTable.train, reduct)
summary(rules)
## predicting newdata
result <- as.numeric(predict(rules, new.decTable.test)$predictions)
accuracy = sum(as.array(test.classes) == (result))/length(test.classes)*100
sprintf("Wynik klasyfikacji: %.1f proc.",accuracy)
library(RoughSets)
print(RoughSetData$pima.dt)
?RoughSetData
set.seed(6)
train.idx = sample(dim(RoughSetData$pima.dt)[1],dim(RoughSetData$pima.dt)[1]*0.62)
pima.decTable <- SF.asDecisionTable(dataset = RoughSetData$pima.dt[train.idx, ], decision.attr = 9, indx.nominal = 9)
test <- SF.asDecisionTable(dataset = RoughSetData$pima.dt[-train.idx, -ncol(RoughSetData$pima.dt)])
test.classes = RoughSetData$pima.dt[-train.idx, ncol(RoughSetData$pima.dt)]
## Dane ciągłe wymagają dyskretyzacji, wybrany w tym celu przykładowy algorytm "global.disc"
cut.values.train <- D.discretization.RST(pima.decTable, type.method = "global.discernibility")
str(cut.values.train$cut.values)
## generate new decision table
new.decTable.train <- SF.applyDecTable(pima.decTable, cut.values.train)
new.decTable.test <- SF.applyDecTable(test, cut.values.train)
new.decTable.train
## generowanie reduktu w oparciu o dane dyskretne, wybrana metoda "quickreduct"
reduct <- FS.feature.subset.computation(new.decTable.train, method = "quickreduct.rst")
## zastosowanie listy cech zawartej w redukcie do wygenerowania zestawu reguł:
rules <- RI.indiscernibilityBasedRules.RST(new.decTable.train, reduct)
summary(rules)
library(RoughSets)
print(RoughSetData$pima.dt)
?RoughSetData
set.seed(6)
train.idx = sample(dim(RoughSetData$pima.dt)[1],dim(RoughSetData$pima.dt)[1]*0.62)
pima.decTable <- SF.asDecisionTable(dataset = RoughSetData$pima.dt[train.idx, ], decision.attr = 9, indx.nominal = 9)
test <- SF.asDecisionTable(dataset = RoughSetData$pima.dt[-train.idx, -ncol(RoughSetData$pima.dt)])
test.classes = RoughSetData$pima.dt[-train.idx, ncol(RoughSetData$pima.dt)]
## Dane ciągłe wymagają dyskretyzacji, wybrany w tym celu przykładowy algorytm "global.disc"
cut.values.train <- D.discretization.RST(pima.decTable, type.method = "global.discernibility")
str(cut.values.train$cut.values)
## generate new decision table
new.decTable.train <- SF.applyDecTable(pima.decTable, cut.values.train)
new.decTable.test <- SF.applyDecTable(test, cut.values.train)
new.decTable.train
## generowanie reduktu w oparciu o dane dyskretne, wybrana metoda "quickreduct"
reduct <- FS.feature.subset.computation(new.decTable.train, method = "quickreduct.rst")
reduct <- FS.feature.subset.computation(new.decTable.train, method = "quickreduct.rst")
rules <- RI.indiscernibilityBasedRules.RST(new.decTable.train, reduct)
summary(rules)
reduct <- FS.feature.subset.computation(new.decTable.train, method = "quickreduct.rst")
rules <- RI.indiscernibilityBasedRules.RST(new.decTable.train, reduct)
summary(rules)
reduct <- FS.feature.subset.computation(new.decTable.train, method = "quickreduct.rst")
rules <- RI.indiscernibilityBasedRules.RST(new.decTable.train, reduct)
summary(rules)
library(RoughSets)
print(RoughSetData$pima.dt)
?RoughSetData
set.seed(6)
train.idx = sample(dim(RoughSetData$pima.dt)[1],dim(RoughSetData$pima.dt)[1]*0.62)
pima.decTable <- SF.asDecisionTable(dataset = RoughSetData$pima.dt[train.idx, ], decision.attr = 9, indx.nominal = 9)
test <- SF.asDecisionTable(dataset = RoughSetData$pima.dt[-train.idx, -ncol(RoughSetData$pima.dt)])
test.classes = RoughSetData$pima.dt[-train.idx, ncol(RoughSetData$pima.dt)]
## Dane ciągłe wymagają dyskretyzacji, wybrany w tym celu przykładowy algorytm "global.disc"
cut.values.train <- D.discretization.RST(pima.decTable, type.method = "global.discernibility")
str(cut.values.train$cut.values)
## generate new decision table
new.decTable.train <- SF.applyDecTable(pima.decTable, cut.values.train)
new.decTable.test <- SF.applyDecTable(test, cut.values.train)
new.decTable.train
reduct <- FS.feature.subset.computation(new.decTable.train, method = "quickreduct.rst")
rules <- RI.indiscernibilityBasedRules.RST(new.decTable.train, reduct)
summary(rules)
## predicting newdata
result <- as.numeric(predict(rules, new.decTable.test)$predictions)
accuracy = sum(as.array(test.classes) == (result))/length(test.classes)*100
sprintf("Wynik klasyfikacji: %.1f proc.",accuracy)
library(RoughSets)
print(RoughSetData$pima.dt)
?RoughSetData
set.seed(6)
train.idx = sample(dim(RoughSetData$pima.dt)[1],dim(RoughSetData$pima.dt)[1]*0.62)
pima.decTable <- SF.asDecisionTable(dataset = RoughSetData$pima.dt[train.idx, ], decision.attr = 9, indx.nominal = 9)
test <- SF.asDecisionTable(dataset = RoughSetData$pima.dt[-train.idx, -ncol(RoughSetData$pima.dt)])
test.classes = RoughSetData$pima.dt[-train.idx, ncol(RoughSetData$pima.dt)]
## Dane ciągłe wymagają dyskretyzacji, wybrany w tym celu przykładowy algorytm "global.disc"
cut.values.train <- D.discretization.RST(pima.decTable, type.method = "global.discernibility")
str(cut.values.train$cut.values)
## generate new decision table
new.decTable.train <- SF.applyDecTable(pima.decTable, cut.values.train)
new.decTable.test <- SF.applyDecTable(test, cut.values.train)
new.decTable.train
library(RoughSets)
print(RoughSetData$pima.dt)
?RoughSetData
<<<<<<< HEAD
set.seed(6)
train.idx = sample(dim(RoughSetData$pima.dt)[1],dim(RoughSetData$pima.dt)[1]*0.62)
pima.decTable <- SF.asDecisionTable(dataset = RoughSetData$pima.dt[train.idx, ], decision.attr = 9, indx.nominal = 9)
test <- SF.asDecisionTable(dataset = RoughSetData$pima.dt[-train.idx, -ncol(RoughSetData$pima.dt)])
test.classes = RoughSetData$pima.dt[-train.idx, ncol(RoughSetData$pima.dt)]
## Dane ciągłe wymagają dyskretyzacji, wybrany w tym celu przykładowy algorytm "global.disc"
cut.values.train <- D.discretization.RST(pima.decTable, type.method = "global.discernibility")
str(cut.values.train$cut.values)
## generate new decision table
new.decTable.train <- SF.applyDecTable(pima.decTable, cut.values.train)
new.decTable.test <- SF.applyDecTable(test, cut.values.train)
new.decTable.train
reduct <- FS.feature.subset.computation(new.decTable.train, method = "quickreduct.rst")
rules <- RI.indiscernibilityBasedRules.RST(new.decTable.train, reduct)
summary(rules)
## predicting newdata
result <- as.numeric(predict(rules, new.decTable.test)$predictions)
accuracy = sum(as.array(test.classes) == (result))/length(test.classes)*100
sprintf("Wynik klasyfikacji: %.1f proc.",accuracy)
=======
print(RoughSetData$hiring.dt)
## wybór cech, które skutkują podziałem uniwersum na zbiory elementarne:
## cechy od 1 do 4 są opisem kandydata, cecha 5 jest decyzją
cechy <- c(3,4)
## relacja równoważności, zwraca numery obiektów, które są tożsame pod względem wybranych cech
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
## niektóre klasy abstrakcji są więcej niż 1-elementowe
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation) #numery obiektów, które są nierozróżnialne z powodu przyjętych cech. str() wyświetla listę: nazwy wartości cech i numery obiektów, które są nierozróżnialne
decision.table
data(RoughSetData)
decision.table <- RoughSetData$hiring.dt
?RoughSetDat
print(RoughSetData$hiring.dt)
cechy <- c(1,2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
data(RoughSetData)
decision.table <- RoughSetData$hiring.dt
?RoughSetDat
print(RoughSetData$hiring.dt)
cechy <- c(1, 3, 4)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
data(RoughSetData)
decision.table <- RoughSetData$hiring.dt
?RoughSetDat
print(RoughSetData$hiring.dt)
cechy <- c(1,2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
data(RoughSetData)
decision.table <- RoughSetData$hiring.dt
print(RoughSetData$hiring.dt)
cechy <- c(1,2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
data(RoughSetData)
decision.table <- RoughSetData$hiring.dt
?RoughSetDat
print(RoughSetData$hiring.dt)
cechy <- c(1, 3, 4)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
data(RoughSetData)
decision.table <- RoughSetData$hiring.dt
print(RoughSetData$hiring.dt)
cechy <- c(1, 3, 4)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
decision.table <- RoughSetData$hiring.dt
cechy <- c(1,2,4) ## inny zbiór cech, obiekty są całkowicie rozróżnialne
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
## wszystkie klasy abstrakcji są 1-elementowe
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
cechy <- c(1) ## inny zbiór, obiekty nie są całkowicie rozróżnialne
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
## klasy abstrakcji są 2,3-elementowe
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
cechy <- c(1) ## inny zbiór, obiekty nie są całkowicie rozróżnialne
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
## klasy abstrakcji są 2,3-elementowe
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
## decision.table <- RoughSetData$ nazwa zbioru z pakietu RoughSetData lub innego, np. z datasets:: nazwa zbioru. Uwaga: po symbolu $ lub :: wciśnij tab aby uzyskać podpowiedź
decision.table
## cechy <- c(numery kolumn)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
decision.table <- RoughSetData$wine.dt
decision.table
## cechy <- c(numery kolumn)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- RoughSetData$housing.dt
decision.table
## cechy <- c(numery kolumn)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- RoughSetData$housing7.dt
decision.table
## cechy <- c(numery kolumn)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- RoughSetData$pima.dt
decision.table
## cechy <- c(numery kolumn)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- RoughSetData$pima7.dt
decision.table
## cechy <- c(numery kolumn)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- RoughSetData$crx.dt
decision.table
## cechy <- c(numery kolumn)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
decision.table <- Titanic
decision.table
## cechy <- c(numery kolumn)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- Titanic
print(decision.table)
## cechy <- c(numery kolumn)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- Titanic
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- Titanic
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- Titanic
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- Titanic
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- Titanic
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- ChickWeight
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- VADeaths
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- RoughSetData$wine.dt
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- RoughSetData$banknote
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
library(chess)
decision.table <- cars
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- car
decision.table <- iris
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- state
decision.table <- npk
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- PlantGrowth
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- vote
decision.table <- data(titanic)
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- titanic
decision.table <- titanic
data(titanic)
decision.table <- titanik
data(titanic)
decision.table <- titanic
data(titanic)
decision.table <- titanic
install.packages("COUNT")
library(COUNT)
data(titanic)
decision.table <- titanic
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
library(COUNT)
data(titanic)
decision.table <- titanic
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
library(COUNT)
data(titanic)
decision.table <- titanic
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
decision.table <- RoughSetData$hiring.dt
cechy <- c(1,2,4) ## inny zbiór cech, obiekty są całkowicie rozróżnialne
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
## wszystkie klasy abstrakcji są 1-elementowe
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
data(RoughSetData)
decision.table <- RoughSetData$hiring.dt
print(RoughSetData$hiring.dt)
cechy <- c(1, 3, 4)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
library(COUNT)
data(titanic)
decision.table <-
SF.asDecisionTable(
dataset = titanic,
decision.att = 3,
indx.nominal = c(1:4)
)
print(decision.table)
cechy <- c(1, 2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
library(COUNT)
data(titanic)
decision.table <-
SF.asDecisionTable(
dataset = titanic,
decision.att = 3,
indx.nominal = c(1:4)
)
print(decision.table)
cechy <- c(2, 3)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
data(RoughSetData)
decision.table <- RoughSetData$hiring.dt
print(RoughSetData$hiring.dt)
cechy <- c(1,2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
## W zbiorze danych RoughSetData znajduje się kilka przykładów
data(RoughSetData)
## hiring.dt to tabela z danymi o kandydatach do pracy, przedstawiona na wykładzie:
decision.table <- RoughSetData$hiring.dt
?RoughSetData
print(RoughSetData$hiring.dt)
## wybór cech, które skutkują podziałem uniwersum na zbiory elementarne:
## cechy od 1 do 4 są opisem kandydata, cecha 5 jest decyzją
cechy <- c(3,4)
## relacja równoważności, zwraca numery obiektów, które są tożsame pod względem wybranych cech
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
# Odkomentować, a po pierwszym uruchomieniu zakomentować znakiem #
#install.packages("RoughSets")
library(RoughSets)
## dane zawarte w strukturze data.frame
data <- data.frame(
c(38.0, 38.1, NA, 37.0, 37.8, 36.5, 36.7, NA),
c(NA, "yes", "no", "yes", NA, "yes", "no", "yes"),
c("no", "yes", "no", "yes", "yes", "no", "yes", NA),
c("yes", "yes", "no", "yes", "no", "no", "no", "yes"))
## nadanie nazw kolumnom, w celu łatwego zarządzania danymi
colnames(data) <- c("Temp","Headache","Nausea","Flu")
## Z danych utworzona zostaje tablica decyzyjna
## co polega na wskazaniu, która cecha jest decyzją,
## oraz, które cechy nie są liczbowe i ich wartości nie mogą być dyskretyzowane ("nominal").
decTable <-
SF.asDecisionTable(
dataset = data,
decision.att = 4,
indx.nominal = c(2:4)
)
## Tablica zawiera wartości brakujące NA, dlatego konieczne jest ich odpowiednie przetworzenie.
## W tym przykładzie zastosowane zostaje usunięcie.
objNA <-
MV.missingValueCompletion(decTable, type.method = "deletionCases")
## objNA z poprzedniego kroku to lista wierszy wskazanych do usunięcia
## zastosowana zostaje do przetworzenia obecnej tablicy
new.decTable <- SF.applyDecTable(decTable, objNA)
print(new.decTable)
## wartości numeryczne (nie "nominal") wymagają dyskretyzacji. Poniżej wyznaczone zostają cięcia
cuts <-
D.discretization.RST(new.decTable, type.method = "local.discernibility")
## Cięcia są wykorzystane do dyskretyzacji cech, które mają ciągłe wartości
new.decTable <- SF.applyDecTable(new.decTable, cuts)
print(new.decTable)
new.decTable
## wybór cech, które skutkują podziałem uniwersum na zbiory elementarne:
## cechy od 1 do 3 są opisem pacjenta, cecha 4 jest decyzją
cechy <- c(1, 2)
## relacja równoważności, zwraca numery obiektów, które są tożsame pod względem wybranych cech
IND <- BC.IND.relation.RST(new.decTable, feature.set = cechy)
## niektóre klasy abstrakcji są więcej niż 1-elementowe
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(new.decTable)[cechy])
str(IND$IND.relation) #numery obiektów, które są nierozróżnialne z powodu przyjętych cech. str() wyświetla listę: nazwy wartości cech i numery obiektów, które są nierozróżnialne
## W zbiorze danych RoughSetData znajduje się kilka przykładów
data(RoughSetData)
## hiring.dt to tabela z danymi o kandydatach do pracy, przedstawiona na wykładzie:
decision.table <- RoughSetData$hiring.dt
?RoughSetData
print(RoughSetData$hiring.dt)
## wybór cech, które skutkują podziałem uniwersum na zbiory elementarne:
## cechy od 1 do 4 są opisem kandydata, cecha 5 jest decyzją
cechy <- c(3,4)
## relacja równoważności, zwraca numery obiektów, które są tożsame pod względem wybranych cech
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
## niektóre klasy abstrakcji są więcej niż 1-elementowe
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation) #numery obiektów, które są nierozróżnialne z powodu przyjętych cech. str() wyświetla listę: nazwy wartości cech i numery obiektów, które są nierozróżnialne
decision.table
data(RoughSetData)
decision.table <- RoughSetData$hiring.dt
print(RoughSetData$hiring.dt)
cechy <- c(1,2)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
data(RoughSetData)
decision.table <- RoughSetData$hiring.dt
print(RoughSetData$hiring.dt)
cechy <- c(1, 3, 4)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
decision.table <- RoughSetData$hiring.dt
cechy <- c(1,2,4) ## inny zbiór cech, obiekty są całkowicie rozróżnialne
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
## wszystkie klasy abstrakcji są 1-elementowe
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
cechy <- c(1) ## inny zbiór, obiekty nie są całkowicie rozróżnialne
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
## klasy abstrakcji są 2,3-elementowe
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
library(COUNT)
data(titanic)
decision.table <-
SF.asDecisionTable(
dataset = titanic,
decision.att = 3,
indx.nominal = c(1:4)
)
print(decision.table)
cechy <- c(2, 3)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
library(COUNT)
data(titanic)
decision.table <-
SF.asDecisionTable(
dataset = titanic,
decision.att = 3,
indx.nominal = c(1:4)
)
print(decision.table)
cechy <- c(2, 3)
IND <- BC.IND.relation.RST(decision.table, feature.set = cechy)
print("Klasy abstrakcji powstałe w wyniku wybrania cech:")
(names(decision.table)[cechy])
str(IND$IND.relation)
>>>>>>> 561a2e6252e50f55514d6ee1397fae677ef88c1e
